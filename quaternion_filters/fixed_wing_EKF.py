
import numpy as np
from numpy import sqrt
from .quaternion import Quaternion
import time
from .filter_log import DataLog


G = 9.81
KTS2MS = 0.514444
FT2M = 0.3048


class FixedWingEKF:

    def __init__(self):

        self.q = np.array([1.0, 0, 0, 0], dtype=float)
        self.a = np.array([0.0, 0, G], dtype=float)
        self.w = np.array([0.0, 0, 0], dtype=float)
        self.tas = 0
        self.alt = 0  # not a state, just passing through for display

        self.P = np.zeros((11, 11))

        self.P[0, 0] = .3**2  # varies from ~.7 to 1.0
        # ~ 10 deg error in pitch/roll ~ sin(10/2)
        self.P[1, 1] = (.1**2)
        self.P[2, 2] = (.1 ** 2)
        self.P[3, 3] = 1  # 180 deg error for heading

        # Accel init error
        # use 2 deg error => sin(2deg) = .03
        self.P[4:7, 4:7] = np.diag(np.ones((3,)))*(.03*G)**2

        qerr = 0
        # Accel model is coordinated turn assumption. How far from this could we be?
        aerr_x = (.4*G)**2 / 1
        aerr_y = (.4*G)**2 / 1
        aerr_z = (.2*G)**2 / 1
        werr_x = (10*np.pi/180)**2 / 1  # 10 deg / sec
        werr_y = (10*np.pi/180)**2 / 1  # 10 deg / sec
        werr_z = (1*np.pi/180)**2 / 1   # 10 deg / sec
        tas_err = (1*KTS2MS)**2 / 1  # () / 5  # 80 knots in 5 seconds
        self.Q = np.diag(np.hstack([qerr*np.ones((4,)),
                                    aerr_x, aerr_y, aerr_z,
                                    werr_x, werr_y, werr_z,
                                    tas_err]))

        accel_err = 1.5
        self.Raccel = np.diag(accel_err*np.ones((3,)))
        gyro_err = .0001
        self.Rgyro = np.diag(gyro_err * np.ones((3,)))

        mag_err = .01
        self.Rmag = np.diag(mag_err * np.ones((3,)))

        self.Rtas = (10*KTS2MS)**2

        self.last_update = time.time()
        self.t0 = time.time()
        self.log = DataLog()

    def state_vec(self):
        return np.vstack(np.concatenate([self.q, self.a, self.w, [self.tas]]))

    def set_state_vec(self, x):
        q = Quaternion(*x[:4].flatten())
        q.normalize()
        self.q = q.as_ndarray()
        self.a = x[4:7].flatten()
        self.w = x[7:10].flatten()
        self.tas = x[10, 0]
        self.log.set_state(self.state_vec(), self.P)

    def predict(self, dt=None):

        if dt is None:
            dt = time.time() - self.last_update
            self.last_update = time.time()

        self.predict_air(dt)
        # if self.tas > 20*KTS2MS:
        #     self.predict_air(dt)
        # else:
        #     self.predict_gnd(dt)

    def predict_air(self, dt):

        F = self.calc_F_air(dt)
        self.P = F.dot(self.P).dot(F.T) + self.Q*dt

        # Quaternion prediction
        q = Quaternion(*self.q)
        self.q = q * Quaternion(1, *(.5*self.w*dt))
        self.q.normalize()
        self.q = self.q.as_ndarray()

        # Accel prediction
        phi = self.quaternion().euler_angles()[0]
        # vector, in inertial coords, in direction which ac acts (along right wing (0,-1,0) for positive phi)
        v_ac = (q*Quaternion.from_vec([0,-1.0,0])*q.inv()).as_ndarray()[1:]
        v_ac[2] = 0
        v_ac /= sqrt(v_ac[0]**2 + v_ac[1]**2)

        ac = v_ac*G*np.tan(phi)
        ag = np.array([0,0,G])
        a = ag + ac

        ab = (q.inv()*Quaternion.from_vec(a)*q).as_ndarray()[1:]
        self.a = ab

        # Gyro prediction
        #self.w = (q.inv()*Quaternion.from_vec([0,0,-G/self.tas*np.tan(phi)])*q).as_ndarray()[1:]
        # If we do nothing here, it is the constant w assumption

        # TAS prediction
        #self.tas = self.tas + self.a[0]*dt

        self.log.predict(dt, self.state_vec(), self.P)

    def predict_gnd(self, dt):
        F = self.calc_F_gnd(dt)
        self.P = F.dot(self.P).dot(F.T) + self.Q*dt

        # Quaternion prediction
        q = Quaternion(*self.q)
        self.q = q * Quaternion(1, *(.5*self.w*dt))
        self.q.normalize()
        self.q = self.q.as_ndarray()

        # Accel
        self.a = (q.inv()*Quaternion.from_vec([0,0,G])*q).as_ndarray()[1:]

        # Gyro prediction is constant

        # TAS prediction
        # self.tas = self.tas + self.a[0]*dt
        self.log.predict(dt, self.state_vec(), self.P)

    def update_accel(self, accels):
        self.log.accel(accels)

        y = accels - self.a
        y = np.vstack(y)

        H = np.zeros((3,11))

        H[0, 4] = 1
        H[1, 5] = 1
        H[2, 6] = 1
        S = H.dot(self.P).dot(H.T) + self.Raccel
        K = self.P.dot(H.T).dot(np.linalg.inv(S))
        x = self.state_vec() + K.dot(y)

        self.P = (np.eye(11) - K.dot(H)).dot(self.P)
        self.set_state_vec(x)

    def update_gyro(self, gyros):
        self.log.gyro(gyros)
        y = gyros - self.w
        y = np.vstack(y)

        H = np.zeros((3, 11))
        H[0, 7] = 1
        H[1, 8] = 1
        H[2, 9] = 1

        S = H.dot(self.P).dot(H.T) + self.Rgyro
        K = self.P.dot(H.T).dot(np.linalg.inv(S))
        x = self.state_vec() + K.dot(y)

        self.P = (np.eye(11) - K.dot(H)).dot(self.P)
        self.set_state_vec(x)

    def update_mag(self, mags):
        """
        See derive.py for discussion of how this works.
        """
        self.log.mag(mags)
        q = Quaternion(*self.q)
        mag_inertial = (q * Quaternion.from_vec(mags) * q.inv()).as_ndarray()[1:]
        mag_inertial[2] = 0.0
        mag_inertial /= np.linalg.norm(mag_inertial)
        mag_body = (q.inv() * Quaternion.from_vec(mag_inertial) * q).as_ndarray()[1:]

        y = mag_body - (q.inv() * Quaternion.from_vec(np.array([1.0, 0, 0])) * q).as_ndarray()[1:]
        y = np.vstack(y)
        H = self.calc_mag_H()
        S = H.dot(self.P).dot(H.T) + self.Rmag
        K = self.P.dot(H.T).dot(np.linalg.inv(S))
        x = self.state_vec() + K.dot(y)

        self.P = (np.eye(11) - K.dot(H)).dot(self.P)
        self.set_state_vec(x)

    def update_bearing(self, bearing):
        """
        bearing uses same definition of psi; inertial x axis is North
        """
        q0, q1, q2, q3 = self.q
        v_head = np.array([-2*q2**2 - 2*q3**2 + 1, 2*q0*q3 + 2*q1*q2])
        v_bearing = np.array([np.cos(bearing), np.sin(bearing)])
        y = np.vstack(v_bearing) - np.vstack(v_head)

        H = np.zeros((2, 11), dtype=float)
        H[0, 2] = -4*q2
        H[0, 3] = -4*q3
        H[1, 0] = 2*q3
        H[1, 1] = 2*q2
        H[1, 2] = 2*q1
        H[1, 3] = 2*q0

        S = H.dot(self.P).dot(H.T) + (1*np.pi/180)**2
        K = self.P.dot(H.T).dot(np.linalg.inv(S))
        x = self.state_vec() + K.dot(y)

        self.P = (np.eye(11) - K.dot(H)).dot(self.P)
        self.set_state_vec(x)

    def update_tas(self, tas):
        self.log.tas(tas)
        y = np.array([[tas - self.tas],])
        H = np.zeros((1,11))
        H[0, 10] = 1
        S = H.dot(self.P).dot(H.T) + self.Rtas
        K = self.P.dot(H.T).dot(np.linalg.inv(S))
        x = self.state_vec() + K.dot(y)

        self.P = (np.eye(11) - K.dot(H)).dot(self.P)
        self.set_state_vec(x)

    def quaternion(self):
        return Quaternion(*self.q)

    def __repr__(self):
        euler_angles = self.quaternion().euler_angles()*180/np.pi
        return f"{time.time()-self.t0:5.0f}{euler_angles[0]:7.1f}{euler_angles[1]:7.1f}{euler_angles[2]:7.1f} {self.w[0]*180/np.pi:6.2f}{self.w[1]*180/np.pi:6.2f}{self.w[2]*180/np.pi:6.2f} {self.tas/KTS2MS:.1f} {self.a[0]/G:6.2f}{self.a[1]/G:6.2f}{self.a[2]/G:6.2f}"

    def calc_mag_H(self):
        q0, q1, q2, q3 = self.q
        H = np.zeros((3,11))
        H[0, 0] = -2.0*q0**3 - 2.0*q0*q1**2 + 2.0*q0*q2**2 + 2.0*q0*q3**2 + 2.0*q0
        H[0, 1] = -2.0*q0**2*q1 - 2.0*q1**3 + 2.0*q1*q2**2 + 2.0*q1*q3**2 + 2.0*q1
        H[0, 2] = -2.0*q0**2*q2 - 2.0*q1**2*q2 + 2.0*q2**3 + 2.0*q2*q3**2 - 2.0*q2
        H[0, 3] = -2.0*q0**2*q3 - 2.0*q1**2*q3 + 2.0*q2**2*q3 + 2.0*q3**3 - 2.0*q3
        H[1, 0] = 4.0*q0**2*q3 - 4.0*q0*q1*q2 - 2.0*q3
        H[1, 1] = 4.0*q0*q1*q3 - 4.0*q1**2*q2 + 2.0*q2
        H[1, 2] = 4.0*q0*q2*q3 - 4.0*q1*q2**2 + 2.0*q1
        H[1, 3] = 4.0*q0*q3**2 - 2.0*q0 - 4.0*q1*q2*q3
        H[2, 0] = -4.0*q0**2*q2 - 4.0*q0*q1*q3 + 2.0*q2
        H[2, 1] = -4.0*q0*q1*q2 - 4.0*q1**2*q3 + 2.0*q3
        H[2, 2] = -4.0*q0*q2**2 + 2.0*q0 - 4.0*q1*q2*q3
        H[2, 3] = -4.0*q0*q2*q3 - 4.0*q1*q3**2 + 2.0*q1
        return H

    def calc_F_gnd(self, dt):
        q0, q1, q2, q3 = self.q
        wx, wy, wz = self.w
        F = np.zeros((11, 11))
        F[0, 0] = 1
        F[0, 1] = -dt*wx/2
        F[0, 2] = -dt*wy/2
        F[0, 3] = -dt*wz/2
        F[0, 7] = -dt*q1/2
        F[0, 8] = -dt*q2/2
        F[0, 9] = -dt*q3/2
        F[1, 0] = dt*wx/2
        F[1, 1] = 1
        F[1, 2] = dt*wz/2
        F[1, 3] = -dt*wy/2
        F[1, 7] = dt*q0/2
        F[1, 8] = -dt*q3/2
        F[1, 9] = dt*q2/2
        F[2, 0] = dt*wy/2
        F[2, 1] = -dt*wz/2
        F[2, 2] = 1
        F[2, 3] = dt*wx/2
        F[2, 7] = dt*q3/2
        F[2, 8] = dt*q0/2
        F[2, 9] = -dt*q1/2
        F[3, 0] = dt*wz/2
        F[3, 1] = dt*wy/2
        F[3, 2] = -dt*wx/2
        F[3, 3] = 1
        F[3, 7] = -dt*q2/2
        F[3, 8] = dt*q1/2
        F[3, 9] = dt*q0/2
        F[4, 0] = -2*G*q2
        F[4, 1] = 2*G*q3
        F[4, 2] = -2*G*q0
        F[4, 3] = 2*G*q1
        F[5, 0] = 2*G*q1
        F[5, 1] = 2*G*q0
        F[5, 2] = 2*G*q3
        F[5, 3] = 2*G*q2
        F[6, 0] = 2*G*q0
        F[6, 1] = -2*G*q1
        F[6, 2] = -2*G*q2
        F[6, 3] = 2*G*q3
        F[7, 7] = 1
        F[8, 8] = 1
        F[9, 9] = 1
        F[10, 10] = 1
        return F

    def calc_F_air(self, dt):
        return self.calc_F_air_const_w(dt)

    def calc_F_air_const_w(self, dt):
        """
        Jacobian with wpredict: [wx,wy,wz]
        """
        q0, q1, q2, q3 = self.q
        wx, wy, wz = self.w
        tas = self.tas
        F = np.zeros((11, 11))
        F[0, 0] = 1
        F[0, 1] = -dt*wx/2
        F[0, 2] = -dt*wy/2
        F[0, 3] = -dt*wz/2
        F[0, 7] = -dt*q1/2
        F[0, 8] = -dt*q2/2
        F[0, 9] = -dt*q3/2
        F[1, 0] = dt*wx/2
        F[1, 1] = 1
        F[1, 2] = dt*wz/2
        F[1, 3] = -dt*wy/2
        F[1, 7] = dt*q0/2
        F[1, 8] = -dt*q3/2
        F[1, 9] = dt*q2/2
        F[2, 0] = dt*wy/2
        F[2, 1] = -dt*wz/2
        F[2, 2] = 1
        F[2, 3] = dt*wx/2
        F[2, 7] = dt*q3/2
        F[2, 8] = dt*q0/2
        F[2, 9] = -dt*q1/2
        F[3, 0] = dt*wz/2
        F[3, 1] = dt*wy/2
        F[3, 2] = -dt*wx/2
        F[3, 3] = 1
        F[3, 7] = -dt*q2/2
        F[3, 8] = dt*q1/2
        F[3, 9] = dt*q0/2
        F[4, 0] = 0.5*G*q0*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) - G*q2 + 0.5*G*q3*(2*q0*q1 + 2*q2*q3)*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + q0*(1.0*G*q0*q1*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q0*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)*(0.5*q0*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2) - q3*(q0*q3 - q1*q2))/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) + 1.0*G*q1*q3*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q3*(2*q0*q1 + 2*q2*q3)*(0.5*q0*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2) - q3*(q0*q3 - q1*q2))*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1))) + q1*(-1.0*G*q0*q2*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 1.0*G*q1**2*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 1.0*G*q1*q2*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 1.0*G*q1*q3*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q1*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)*(0.5*q0*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2) - q3*(q0*q3 - q1*q2))/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q2*(2*q0*q1 + 2*q2*q3)*(0.5*q0*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2) - q3*(q0*q3 - q1*q2))*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1))) - q2*(1.0*G*q0*q1*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) - 1.0*G*q1**2*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 1.0*G*q1*q2*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) - 0.5*G*q1*(2*q0*q1 + 2*q2*q3)*(0.5*q0*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2) - q3*(q0*q3 - q1*q2))*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) + 1.0*G*q2*q3*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q2*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)*(0.5*q0*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2) - q3*(q0*q3 - q1*q2))/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) + G) + q3*(-1.0*G*q0**2*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 1.0*G*q0*q1*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q0*(2*q0*q1 + 2*q2*q3)*(0.5*q0*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2) - q3*(q0*q3 - q1*q2))*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) - 1.0*G*q1*q3*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) - 1.0*G*q3**2*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) - 0.5*G*q3*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)*(0.5*q0*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2) - q3*(q0*q3 - q1*q2))/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*(2*q0*q1 + 2*q2*q3)*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)))
        F[4, 1] = 0.5*G*q1*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q2*(2*q0*q1 + 2*q2*q3)*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + G*q3 + q0*(1.0*G*q0**2*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 2.0*G*q0*q1*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)**2) - 1.0*G*q0*q2*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 1.0*G*q0*q3*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q0*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)*(-0.5*q1*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2) + q2*(q0*q3 - q1*q2))/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) + 1.0*G*q1*q3*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 2.0*G*q1*q3*(2*q0*q1 + 2*q2*q3)*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)**2) + 0.5*G*q3*(2*q0*q1 + 2*q2*q3)*(-0.5*q1*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2) + q2*(q0*q3 - q1*q2))*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1))) + q1*(1.0*G*q0*q1*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 1.0*G*q0*q2*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 2.0*G*q1**2*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)**2) + 2.0*G*q1*q2*(2*q0*q1 + 2*q2*q3)*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)**2) + 0.5*G*q1*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)*(-0.5*q1*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2) + q2*(q0*q3 - q1*q2))/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q2*(2*q0*q1 + 2*q2*q3)*(-0.5*q1*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2) + q2*(q0*q3 - q1*q2))*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1))) - q2*(-1.0*G*q0*q1*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 1.0*G*q0*q2*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) - 1.0*G*q1**2*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) - 2.0*G*q1**2*(2*q0*q1 + 2*q2*q3)*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)**2) + 2.0*G*q1*q2*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)**2) - 0.5*G*q1*(2*q0*q1 + 2*q2*q3)*(-0.5*q1*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2) + q2*(q0*q3 - q1*q2))*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) - 1.0*G*q2**2*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q2*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)*(-0.5*q1*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2) + q2*(q0*q3 - q1*q2))/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) - 0.5*G*(2*q0*q1 + 2*q2*q3)*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1))) + q3*(1.0*G*q0**2*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 1.0*G*q0*q1*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 2.0*G*q0*q1*(2*q0*q1 + 2*q2*q3)*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)**2) - 1.0*G*q0*q3*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q0*(2*q0*q1 + 2*q2*q3)*(-0.5*q1*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2) + q2*(q0*q3 - q1*q2))*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) - 2.0*G*q1*q3*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)**2) + 1.0*G*q2*q3*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) - 0.5*G*q3*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)*(-0.5*q1*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2) + q2*(q0*q3 - q1*q2))/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) + G)
        F[4, 2] = -G*q0 + 0.5*G*q1*(2*q0*q1 + 2*q2*q3)*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) - 0.5*G*q2*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + q0*(-1.0*G*q0*q1*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 2.0*G*q0*q2*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)**2) + 1.0*G*q0*q3*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q0*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)*(q1*(q0*q3 - q1*q2) + 0.5*q2*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2))/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) - 1.0*G*q2*q3*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 2.0*G*q2*q3*(2*q0*q1 + 2*q2*q3)*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)**2) + 1.0*G*q3**2*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q3*(2*q0*q1 + 2*q2*q3)*(q1*(q0*q3 - q1*q2) + 0.5*q2*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2))*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) - G) + q1*(-1.0*G*q1**2*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 2.0*G*q1*q2*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)**2) + 1.0*G*q1*q3*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q1*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)*(q1*(q0*q3 - q1*q2) + 0.5*q2*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2))/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) - 1.0*G*q2**2*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 2.0*G*q2**2*(2*q0*q1 + 2*q2*q3)*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)**2) + 1.0*G*q2*q3*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q2*(2*q0*q1 + 2*q2*q3)*(q1*(q0*q3 - q1*q2) + 0.5*q2*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2))*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*(2*q0*q1 + 2*q2*q3)*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1))) - q2*(-2.0*G*q1*q2*(2*q0*q1 + 2*q2*q3)*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)**2) - 1.0*G*q1*q3*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) - 0.5*G*q1*(2*q0*q1 + 2*q2*q3)*(q1*(q0*q3 - q1*q2) + 0.5*q2*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2))*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) + 2.0*G*q2**2*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)**2) + 1.0*G*q2*q3*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q2*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)*(q1*(q0*q3 - q1*q2) + 0.5*q2*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2))/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1))) + q3*(-1.0*G*q0*q2*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 2.0*G*q0*q2*(2*q0*q1 + 2*q2*q3)*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)**2) + 1.0*G*q0*q3*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q0*(2*q0*q1 + 2*q2*q3)*(q1*(q0*q3 - q1*q2) + 0.5*q2*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2))*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) + 1.0*G*q1*q3*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) - 2.0*G*q2*q3*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)**2) - 1.0*G*q3**2*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) - 0.5*G*q3*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)*(q1*(q0*q3 - q1*q2) + 0.5*q2*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2))/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)))

        F[4, 3] = 0.5*G*q0*(2*q0*q1 + 2*q2*q3)*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + G*q1 - 0.5*G*q3*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + q0*(1.0*G*q0**2*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 1.0*G*q0*q2*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q0*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)*(-q0*(q0*q3 - q1*q2) - 0.5*q3*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2))/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) + 1.0*G*q2*q3*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 1.0*G*q3**2*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q3*(2*q0*q1 + 2*q2*q3)*(-q0*(q0*q3 - q1*q2) - 0.5*q3*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2))*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*(2*q0*q1 + 2*q2*q3)*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1))) + q1*(1.0*G*q0*q1*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 1.0*G*q1*q2*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q1*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)*(-q0*(q0*q3 - q1*q2) - 0.5*q3*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2))/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) + 1.0*G*q2**2*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 1.0*G*q2*q3*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q2*(2*q0*q1 + 2*q2*q3)*(-q0*(q0*q3 - q1*q2) - 0.5*q3*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2))*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) + G) - q2*(1.0*G*q0*q2*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) - 1.0*G*q1*q2*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) - 1.0*G*q1*q3*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) - 0.5*G*q1*(2*q0*q1 + 2*q2*q3)*(-q0*(q0*q3 - q1*q2) - 0.5*q3*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2))*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) + 1.0*G*q2**2*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q2*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)*(-q0*(q0*q3 - q1*q2) - 0.5*q3*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2))/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1))) + q3*(1.0*G*q0*q2*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q0*(2*q0*q1 + 2*q2*q3)*(-q0*(q0*q3 - q1*q2) - 0.5*q3*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2))*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) - 1.0*G*q2*q3*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) - 0.5*G*q3*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)*(-q0*(q0*q3 - q1*q2) - 0.5*q3*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2))/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) - 0.5*G*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)))
        F[5, 0] = 0.5*G*q0*(2*q0*q1 + 2*q2*q3)*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + G*q1 - 0.5*G*q3*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + q0*(-1.0*G*q0**2*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 1.0*G*q0*q1*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q0*(2*q0*q1 + 2*q2*q3)*(0.5*q0*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2) - q3*(q0*q3 - q1*q2))*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) - 1.0*G*q1*q3*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) - 1.0*G*q3**2*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) - 0.5*G*q3*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)*(0.5*q0*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2) - q3*(q0*q3 - q1*q2))/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*(2*q0*q1 + 2*q2*q3)*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1))) + q1*(1.0*G*q0*q1*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) - 1.0*G*q1**2*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 1.0*G*q1*q2*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) - 0.5*G*q1*(2*q0*q1 + 2*q2*q3)*(0.5*q0*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2) - q3*(q0*q3 - q1*q2))*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) + 1.0*G*q2*q3*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q2*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)*(0.5*q0*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2) - q3*(q0*q3 - q1*q2))/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) + G) + q2*(-1.0*G*q0*q2*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 1.0*G*q1**2*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 1.0*G*q1*q2*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 1.0*G*q1*q3*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q1*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)*(0.5*q0*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2) - q3*(q0*q3 - q1*q2))/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q2*(2*q0*q1 + 2*q2*q3)*(0.5*q0*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2) - q3*(q0*q3 - q1*q2))*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1))) - q3*(1.0*G*q0*q1*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q0*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)*(0.5*q0*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2) - q3*(q0*q3 - q1*q2))/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) + 1.0*G*q1*q3*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q3*(2*q0*q1 + 2*q2*q3)*(0.5*q0*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2) - q3*(q0*q3 - q1*q2))*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)))
        F[5, 1] = G*q0 - 0.5*G*q1*(2*q0*q1 + 2*q2*q3)*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q2*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + q0*(1.0*G*q0**2*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 1.0*G*q0*q1*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 2.0*G*q0*q1*(2*q0*q1 + 2*q2*q3)*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)**2) - 1.0*G*q0*q3*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q0*(2*q0*q1 + 2*q2*q3)*(-0.5*q1*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2) + q2*(q0*q3 - q1*q2))*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) - 2.0*G*q1*q3*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)**2) + 1.0*G*q2*q3*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) - 0.5*G*q3*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)*(-0.5*q1*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2) + q2*(q0*q3 - q1*q2))/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) + G) + q1*(-1.0*G*q0*q1*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 1.0*G*q0*q2*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) - 1.0*G*q1**2*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) - 2.0*G*q1**2*(2*q0*q1 + 2*q2*q3)*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)**2) + 2.0*G*q1*q2*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)**2) - 0.5*G*q1*(2*q0*q1 + 2*q2*q3)*(-0.5*q1*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2) + q2*(q0*q3 - q1*q2))*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) - 1.0*G*q2**2*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q2*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)*(-0.5*q1*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2) + q2*(q0*q3 - q1*q2))/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) - 0.5*G*(2*q0*q1 + 2*q2*q3)*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1))) + q2*(1.0*G*q0*q1*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 1.0*G*q0*q2*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 2.0*G*q1**2*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)**2) + 2.0*G*q1*q2*(2*q0*q1 + 2*q2*q3)*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)**2) + 0.5*G*q1*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)*(-0.5*q1*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2) + q2*(q0*q3 - q1*q2))/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q2*(2*q0*q1 + 2*q2*q3)*(-0.5*q1*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2) + q2*(q0*q3 - q1*q2))*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1))) - q3*(1.0*G*q0**2*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 2.0*G*q0*q1*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)**2) - 1.0*G*q0*q2*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 1.0*G*q0*q3*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q0*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)*(-0.5*q1*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2) + q2*(q0*q3 - q1*q2))/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) + 1.0*G*q1*q3*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 2.0*G*q1*q3*(2*q0*q1 + 2*q2*q3)*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)**2) + 0.5*G*q3*(2*q0*q1 + 2*q2*q3)*(-0.5*q1*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2) + q2*(q0*q3 - q1*q2))*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)))

        F[5, 2] = 0.5*G*q1*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q2*(2*q0*q1 + 2*q2*q3)*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + G*q3 + q0*(-1.0*G*q0*q2*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 2.0*G*q0*q2*(2*q0*q1 + 2*q2*q3)*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)**2) + 1.0*G*q0*q3*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q0*(2*q0*q1 + 2*q2*q3)*(q1*(q0*q3 - q1*q2) + 0.5*q2*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2))*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) + 1.0*G*q1*q3*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) - 2.0*G*q2*q3*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)**2) - 1.0*G*q3**2*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) - 0.5*G*q3*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)*(q1*(q0*q3 - q1*q2) + 0.5*q2*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2))/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1))) + q1*(-2.0*G*q1*q2*(2*q0*q1 + 2*q2*q3)*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)**2) - 1.0*G*q1*q3*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) - 0.5*G*q1*(2*q0*q1 + 2*q2*q3)*(q1*(q0*q3 - q1*q2) + 0.5*q2*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2))*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) + 2.0*G*q2**2*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)**2) + 1.0*G*q2*q3*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q2*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)*(q1*(q0*q3 - q1*q2) + 0.5*q2*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2))/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1))) + q2*(-1.0*G*q1**2*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 2.0*G*q1*q2*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)**2) + 1.0*G*q1*q3*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q1*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)*(q1*(q0*q3 - q1*q2) + 0.5*q2*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2))/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) - 1.0*G*q2**2*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 2.0*G*q2**2*(2*q0*q1 + 2*q2*q3)*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)**2) + 1.0*G*q2*q3*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q2*(2*q0*q1 + 2*q2*q3)*(q1*(q0*q3 - q1*q2) + 0.5*q2*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2))*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*(2*q0*q1 + 2*q2*q3)*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1))) - q3*(-1.0*G*q0*q1*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 2.0*G*q0*q2*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)**2) + 1.0*G*q0*q3*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q0*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)*(q1*(q0*q3 - q1*q2) + 0.5*q2*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2))/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) - 1.0*G*q2*q3*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 2.0*G*q2*q3*(2*q0*q1 + 2*q2*q3)*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)**2) + 1.0*G*q3**2*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q3*(2*q0*q1 + 2*q2*q3)*(q1*(q0*q3 - q1*q2) + 0.5*q2*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2))*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) - G)
        F[5, 3] = -0.5*G*q0*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + G*q2 - 0.5*G*q3*(2*q0*q1 + 2*q2*q3)*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + q0*(1.0*G*q0*q2*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q0*(2*q0*q1 + 2*q2*q3)*(-q0*(q0*q3 - q1*q2) - 0.5*q3*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2))*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) - 1.0*G*q2*q3*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) - 0.5*G*q3*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)*(-q0*(q0*q3 - q1*q2) - 0.5*q3*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2))/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) - 0.5*G*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1))) + q1*(1.0*G*q0*q2*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) - 1.0*G*q1*q2*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) - 1.0*G*q1*q3*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) - 0.5*G*q1*(2*q0*q1 + 2*q2*q3)*(-q0*(q0*q3 - q1*q2) - 0.5*q3*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2))*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) + 1.0*G*q2**2*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q2*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)*(-q0*(q0*q3 - q1*q2) - 0.5*q3*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2))/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1))) + q2*(1.0*G*q0*q1*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 1.0*G*q1*q2*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q1*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)*(-q0*(q0*q3 - q1*q2) - 0.5*q3*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2))/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) + 1.0*G*q2**2*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 1.0*G*q2*q3*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q2*(2*q0*q1 + 2*q2*q3)*(-q0*(q0*q3 - q1*q2) - 0.5*q3*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2))*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) + G) - q3*(1.0*G*q0**2*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 1.0*G*q0*q2*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q0*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)*(-q0*(q0*q3 - q1*q2) - 0.5*q3*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2))/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) + 1.0*G*q2*q3*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 1.0*G*q3**2*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q3*(2*q0*q1 + 2*q2*q3)*(-q0*(q0*q3 - q1*q2) - 0.5*q3*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2))*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*(2*q0*q1 + 2*q2*q3)*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)))
        F[6, 0] = G*q0 - 0.5*G*q1*(2*q0*q1 + 2*q2*q3)*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q2*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + q0*(1.0*G*q0*q1*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) - 1.0*G*q1**2*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 1.0*G*q1*q2*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) - 0.5*G*q1*(2*q0*q1 + 2*q2*q3)*(0.5*q0*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2) - q3*(q0*q3 - q1*q2))*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) + 1.0*G*q2*q3*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q2*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)*(0.5*q0*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2) - q3*(q0*q3 - q1*q2))/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) + G) - q1*(-1.0*G*q0**2*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 1.0*G*q0*q1*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q0*(2*q0*q1 + 2*q2*q3)*(0.5*q0*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2) - q3*(q0*q3 - q1*q2))*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) - 1.0*G*q1*q3*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) - 1.0*G*q3**2*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) - 0.5*G*q3*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)*(0.5*q0*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2) - q3*(q0*q3 - q1*q2))/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*(2*q0*q1 + 2*q2*q3)*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1))) + q2*(1.0*G*q0*q1*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q0*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)*(0.5*q0*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2) - q3*(q0*q3 - q1*q2))/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) + 1.0*G*q1*q3*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q3*(2*q0*q1 + 2*q2*q3)*(0.5*q0*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2) - q3*(q0*q3 - q1*q2))*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1))) + q3*(-1.0*G*q0*q2*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 1.0*G*q1**2*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 1.0*G*q1*q2*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 1.0*G*q1*q3*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q1*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)*(0.5*q0*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2) - q3*(q0*q3 - q1*q2))/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q2*(2*q0*q1 + 2*q2*q3)*(0.5*q0*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2) - q3*(q0*q3 - q1*q2))*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)))

        F[6, 1] = -0.5*G*q0*(2*q0*q1 + 2*q2*q3)*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) - G*q1 + 0.5*G*q3*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + q0*(-1.0*G*q0*q1*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 1.0*G*q0*q2*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) - 1.0*G*q1**2*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) - 2.0*G*q1**2*(2*q0*q1 + 2*q2*q3)*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)**2) + 2.0*G*q1*q2*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)**2) - 0.5*G*q1*(2*q0*q1 + 2*q2*q3)*(-0.5*q1*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2) + q2*(q0*q3 - q1*q2))*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) - 1.0*G*q2**2*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q2*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)*(-0.5*q1*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2) + q2*(q0*q3 - q1*q2))/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) - 0.5*G*(2*q0*q1 + 2*q2*q3)*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1))) - q1*(1.0*G*q0**2*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 1.0*G*q0*q1*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 2.0*G*q0*q1*(2*q0*q1 + 2*q2*q3)*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)**2) - 1.0*G*q0*q3*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q0*(2*q0*q1 + 2*q2*q3)*(-0.5*q1*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2) + q2*(q0*q3 - q1*q2))*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) - 2.0*G*q1*q3*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)**2) + 1.0*G*q2*q3*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) - 0.5*G*q3*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)*(-0.5*q1*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2) + q2*(q0*q3 - q1*q2))/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) + G) + q2*(1.0*G*q0**2*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 2.0*G*q0*q1*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)**2) - 1.0*G*q0*q2*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 1.0*G*q0*q3*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q0*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)*(-0.5*q1*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2) + q2*(q0*q3 - q1*q2))/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) + 1.0*G*q1*q3*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 2.0*G*q1*q3*(2*q0*q1 + 2*q2*q3)*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)**2) + 0.5*G*q3*(2*q0*q1 + 2*q2*q3)*(-0.5*q1*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2) + q2*(q0*q3 - q1*q2))*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1))) + q3*(1.0*G*q0*q1*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 1.0*G*q0*q2*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 2.0*G*q1**2*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)**2) + 2.0*G*q1*q2*(2*q0*q1 + 2*q2*q3)*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)**2) + 0.5*G*q1*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)*(-0.5*q1*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2) + q2*(q0*q3 - q1*q2))/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q2*(2*q0*q1 + 2*q2*q3)*(-0.5*q1*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2) + q2*(q0*q3 - q1*q2))*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)))
        F[6, 2] = 0.5*G*q0*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) - G*q2 + 0.5*G*q3*(2*q0*q1 + 2*q2*q3)*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + q0*(-2.0*G*q1*q2*(2*q0*q1 + 2*q2*q3)*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)**2) - 1.0*G*q1*q3*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) - 0.5*G*q1*(2*q0*q1 + 2*q2*q3)*(q1*(q0*q3 - q1*q2) + 0.5*q2*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2))*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) + 2.0*G*q2**2*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)**2) + 1.0*G*q2*q3*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q2*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)*(q1*(q0*q3 - q1*q2) + 0.5*q2*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2))/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1))) - q1*(-1.0*G*q0*q2*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 2.0*G*q0*q2*(2*q0*q1 + 2*q2*q3)*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)**2) + 1.0*G*q0*q3*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q0*(2*q0*q1 + 2*q2*q3)*(q1*(q0*q3 - q1*q2) + 0.5*q2*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2))*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) + 1.0*G*q1*q3*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) - 2.0*G*q2*q3*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)**2) - 1.0*G*q3**2*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) - 0.5*G*q3*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)*(q1*(q0*q3 - q1*q2) + 0.5*q2*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2))/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1))) + q2*(-1.0*G*q0*q1*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 2.0*G*q0*q2*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)**2) + 1.0*G*q0*q3*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q0*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)*(q1*(q0*q3 - q1*q2) + 0.5*q2*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2))/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) - 1.0*G*q2*q3*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 2.0*G*q2*q3*(2*q0*q1 + 2*q2*q3)*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)**2) + 1.0*G*q3**2*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q3*(2*q0*q1 + 2*q2*q3)*(q1*(q0*q3 - q1*q2) + 0.5*q2*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2))*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) - G) + q3*(-1.0*G*q1**2*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 2.0*G*q1*q2*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)**2) + 1.0*G*q1*q3*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q1*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)*(q1*(q0*q3 - q1*q2) + 0.5*q2*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2))/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) - 1.0*G*q2**2*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 2.0*G*q2**2*(2*q0*q1 + 2*q2*q3)*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)**2) + 1.0*G*q2*q3*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q2*(2*q0*q1 + 2*q2*q3)*(q1*(q0*q3 - q1*q2) + 0.5*q2*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2))*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*(2*q0*q1 + 2*q2*q3)*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)))

        F[6, 3] = 0.5*G*q1*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q2*(2*q0*q1 + 2*q2*q3)*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + G*q3 + q0*(1.0*G*q0*q2*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) - 1.0*G*q1*q2*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) - 1.0*G*q1*q3*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) - 0.5*G*q1*(2*q0*q1 + 2*q2*q3)*(-q0*(q0*q3 - q1*q2) - 0.5*q3*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2))*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) + 1.0*G*q2**2*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q2*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)*(-q0*(q0*q3 - q1*q2) - 0.5*q3*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2))/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1))) - q1*(1.0*G*q0*q2*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q0*(2*q0*q1 + 2*q2*q3)*(-q0*(q0*q3 - q1*q2) - 0.5*q3*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2))*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) - 1.0*G*q2*q3*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) - 0.5*G*q3*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)*(-q0*(q0*q3 - q1*q2) - 0.5*q3*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2))/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) - 0.5*G*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1))) + q2*(1.0*G*q0**2*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 1.0*G*q0*q2*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q0*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)*(-q0*(q0*q3 - q1*q2) - 0.5*q3*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2))/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) + 1.0*G*q2*q3*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 1.0*G*q3**2*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q3*(2*q0*q1 + 2*q2*q3)*(-q0*(q0*q3 - q1*q2) - 0.5*q3*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2))*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*(2*q0*q1 + 2*q2*q3)*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1))) + q3*(1.0*G*q0*q1*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 1.0*G*q1*q2*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q1*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)*(-q0*(q0*q3 - q1*q2) - 0.5*q3*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2))/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) + 1.0*G*q2**2*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 1.0*G*q2*q3*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q2*(2*q0*q1 + 2*q2*q3)*(-q0*(q0*q3 - q1*q2) - 0.5*q3*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2))*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) + G)
        F[7, 7] = 1
        F[8, 8] = 1
        F[9, 9] = 1
        F[10, 10] = 1
        return F

    def calc_F_air_body_rotation_rate(self, dt):
        """
        Jacobian with wpredict: (q.inv()*quaternion.Quaternion.from_vec([0,0,-G/tas*tan(phi)])*q).as_ndarray()[1:]
        """
        q0, q1, q2, q3 = self.q
        wx, wy, wz = self.w
        tas = self.tas
        F = np.zeros((11, 11))
        F[0, 0] = 1
        F[0, 1] = -dt*wx/2
        F[0, 2] = -dt*wy/2
        F[0, 3] = -dt*wz/2
        F[0, 7] = -dt*q1/2
        F[0, 8] = -dt*q2/2
        F[0, 9] = -dt*q3/2
        F[1, 0] = dt*wx/2
        F[1, 1] = 1
        F[1, 2] = dt*wz/2
        F[1, 3] = -dt*wy/2
        F[1, 7] = dt*q0/2
        F[1, 8] = -dt*q3/2
        F[1, 9] = dt*q2/2
        F[2, 0] = dt*wy/2
        F[2, 1] = -dt*wz/2
        F[2, 2] = 1
        F[2, 3] = dt*wx/2
        F[2, 7] = dt*q3/2
        F[2, 8] = dt*q0/2
        F[2, 9] = -dt*q1/2
        F[3, 0] = dt*wz/2
        F[3, 1] = dt*wy/2
        F[3, 2] = -dt*wx/2
        F[3, 3] = 1
        F[3, 7] = -dt*q2/2
        F[3, 8] = dt*q1/2
        F[3, 9] = dt*q0/2
        F[4, 0] = 0.5*G*q0*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) - G*q2 + 0.5*G*q3*(2*q0*q1 + 2*q2*q3)*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + q0*(1.0*G*q0*q1*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q0*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)*(0.5*q0*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2) - q3*(q0*q3 - q1*q2))/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) + 1.0*G*q1*q3*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q3*(2*q0*q1 + 2*q2*q3)*(0.5*q0*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2) - q3*(q0*q3 - q1*q2))*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1))) + q1*(-1.0*G*q0*q2*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 1.0*G*q1**2*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 1.0*G*q1*q2*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 1.0*G*q1*q3*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q1*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)*(0.5*q0*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2) - q3*(q0*q3 - q1*q2))/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q2*(2*q0*q1 + 2*q2*q3)*(0.5*q0*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2) - q3*(q0*q3 - q1*q2))*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1))) - q2*(1.0*G*q0*q1*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) - 1.0*G*q1**2*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 1.0*G*q1*q2*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) - 0.5*G*q1*(2*q0*q1 + 2*q2*q3)*(0.5*q0*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2) - q3*(q0*q3 - q1*q2))*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) + 1.0*G*q2*q3*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q2*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)*(0.5*q0*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2) - q3*(q0*q3 - q1*q2))/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) + G) + q3*(-1.0*G*q0**2*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 1.0*G*q0*q1*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q0*(2*q0*q1 + 2*q2*q3)*(0.5*q0*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2) - q3*(q0*q3 - q1*q2))*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) - 1.0*G*q1*q3*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) - 1.0*G*q3**2*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) - 0.5*G*q3*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)*(0.5*q0*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2) - q3*(q0*q3 - q1*q2))/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*(2*q0*q1 + 2*q2*q3)*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)))
        F[4, 1] = 0.5*G*q1*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q2*(2*q0*q1 + 2*q2*q3)*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + G*q3 + q0*(1.0*G*q0**2*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 2.0*G*q0*q1*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)**2) - 1.0*G*q0*q2*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 1.0*G*q0*q3*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q0*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)*(-0.5*q1*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2) + q2*(q0*q3 - q1*q2))/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) + 1.0*G*q1*q3*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 2.0*G*q1*q3*(2*q0*q1 + 2*q2*q3)*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)**2) + 0.5*G*q3*(2*q0*q1 + 2*q2*q3)*(-0.5*q1*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2) + q2*(q0*q3 - q1*q2))*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1))) + q1*(1.0*G*q0*q1*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 1.0*G*q0*q2*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 2.0*G*q1**2*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)**2) + 2.0*G*q1*q2*(2*q0*q1 + 2*q2*q3)*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)**2) + 0.5*G*q1*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)*(-0.5*q1*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2) + q2*(q0*q3 - q1*q2))/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q2*(2*q0*q1 + 2*q2*q3)*(-0.5*q1*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2) + q2*(q0*q3 - q1*q2))*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1))) - q2*(-1.0*G*q0*q1*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 1.0*G*q0*q2*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) - 1.0*G*q1**2*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) - 2.0*G*q1**2*(2*q0*q1 + 2*q2*q3)*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)**2) + 2.0*G*q1*q2*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)**2) - 0.5*G*q1*(2*q0*q1 + 2*q2*q3)*(-0.5*q1*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2) + q2*(q0*q3 - q1*q2))*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) - 1.0*G*q2**2*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q2*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)*(-0.5*q1*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2) + q2*(q0*q3 - q1*q2))/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) - 0.5*G*(2*q0*q1 + 2*q2*q3)*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1))) + q3*(1.0*G*q0**2*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 1.0*G*q0*q1*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 2.0*G*q0*q1*(2*q0*q1 + 2*q2*q3)*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)**2) - 1.0*G*q0*q3*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q0*(2*q0*q1 + 2*q2*q3)*(-0.5*q1*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2) + q2*(q0*q3 - q1*q2))*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) - 2.0*G*q1*q3*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)**2) + 1.0*G*q2*q3*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) - 0.5*G*q3*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)*(-0.5*q1*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2) + q2*(q0*q3 - q1*q2))/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) + G)

        F[4, 2] = -G*q0 + 0.5*G*q1*(2*q0*q1 + 2*q2*q3)*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) - 0.5*G*q2*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + q0*(-1.0*G*q0*q1*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 2.0*G*q0*q2*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)**2) + 1.0*G*q0*q3*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q0*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)*(q1*(q0*q3 - q1*q2) + 0.5*q2*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2))/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) - 1.0*G*q2*q3*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 2.0*G*q2*q3*(2*q0*q1 + 2*q2*q3)*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)**2) + 1.0*G*q3**2*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q3*(2*q0*q1 + 2*q2*q3)*(q1*(q0*q3 - q1*q2) + 0.5*q2*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2))*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) - G) + q1*(-1.0*G*q1**2*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 2.0*G*q1*q2*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)**2) + 1.0*G*q1*q3*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q1*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)*(q1*(q0*q3 - q1*q2) + 0.5*q2*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2))/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) - 1.0*G*q2**2*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 2.0*G*q2**2*(2*q0*q1 + 2*q2*q3)*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)**2) + 1.0*G*q2*q3*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q2*(2*q0*q1 + 2*q2*q3)*(q1*(q0*q3 - q1*q2) + 0.5*q2*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2))*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*(2*q0*q1 + 2*q2*q3)*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1))) - q2*(-2.0*G*q1*q2*(2*q0*q1 + 2*q2*q3)*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)**2) - 1.0*G*q1*q3*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) - 0.5*G*q1*(2*q0*q1 + 2*q2*q3)*(q1*(q0*q3 - q1*q2) + 0.5*q2*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2))*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) + 2.0*G*q2**2*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)**2) + 1.0*G*q2*q3*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q2*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)*(q1*(q0*q3 - q1*q2) + 0.5*q2*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2))/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1))) + q3*(-1.0*G*q0*q2*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 2.0*G*q0*q2*(2*q0*q1 + 2*q2*q3)*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)**2) + 1.0*G*q0*q3*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q0*(2*q0*q1 + 2*q2*q3)*(q1*(q0*q3 - q1*q2) + 0.5*q2*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2))*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) + 1.0*G*q1*q3*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) - 2.0*G*q2*q3*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)**2) - 1.0*G*q3**2*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) - 0.5*G*q3*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)*(q1*(q0*q3 - q1*q2) + 0.5*q2*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2))/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)))
        F[4, 3] = 0.5*G*q0*(2*q0*q1 + 2*q2*q3)*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + G*q1 - 0.5*G*q3*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + q0*(1.0*G*q0**2*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 1.0*G*q0*q2*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q0*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)*(-q0*(q0*q3 - q1*q2) - 0.5*q3*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2))/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) + 1.0*G*q2*q3*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 1.0*G*q3**2*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q3*(2*q0*q1 + 2*q2*q3)*(-q0*(q0*q3 - q1*q2) - 0.5*q3*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2))*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*(2*q0*q1 + 2*q2*q3)*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1))) + q1*(1.0*G*q0*q1*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 1.0*G*q1*q2*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q1*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)*(-q0*(q0*q3 - q1*q2) - 0.5*q3*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2))/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) + 1.0*G*q2**2*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 1.0*G*q2*q3*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q2*(2*q0*q1 + 2*q2*q3)*(-q0*(q0*q3 - q1*q2) - 0.5*q3*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2))*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) + G) - q2*(1.0*G*q0*q2*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) - 1.0*G*q1*q2*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) - 1.0*G*q1*q3*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) - 0.5*G*q1*(2*q0*q1 + 2*q2*q3)*(-q0*(q0*q3 - q1*q2) - 0.5*q3*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2))*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) + 1.0*G*q2**2*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q2*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)*(-q0*(q0*q3 - q1*q2) - 0.5*q3*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2))/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1))) + q3*(1.0*G*q0*q2*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q0*(2*q0*q1 + 2*q2*q3)*(-q0*(q0*q3 - q1*q2) - 0.5*q3*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2))*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) - 1.0*G*q2*q3*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) - 0.5*G*q3*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)*(-q0*(q0*q3 - q1*q2) - 0.5*q3*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2))/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) - 0.5*G*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)))
        F[5, 0] = 0.5*G*q0*(2*q0*q1 + 2*q2*q3)*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + G*q1 - 0.5*G*q3*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + q0*(-1.0*G*q0**2*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 1.0*G*q0*q1*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q0*(2*q0*q1 + 2*q2*q3)*(0.5*q0*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2) - q3*(q0*q3 - q1*q2))*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) - 1.0*G*q1*q3*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) - 1.0*G*q3**2*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) - 0.5*G*q3*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)*(0.5*q0*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2) - q3*(q0*q3 - q1*q2))/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*(2*q0*q1 + 2*q2*q3)*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1))) + q1*(1.0*G*q0*q1*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) - 1.0*G*q1**2*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 1.0*G*q1*q2*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) - 0.5*G*q1*(2*q0*q1 + 2*q2*q3)*(0.5*q0*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2) - q3*(q0*q3 - q1*q2))*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) + 1.0*G*q2*q3*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q2*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)*(0.5*q0*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2) - q3*(q0*q3 - q1*q2))/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) + G) + q2*(-1.0*G*q0*q2*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 1.0*G*q1**2*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 1.0*G*q1*q2*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 1.0*G*q1*q3*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q1*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)*(0.5*q0*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2) - q3*(q0*q3 - q1*q2))/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q2*(2*q0*q1 + 2*q2*q3)*(0.5*q0*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2) - q3*(q0*q3 - q1*q2))*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1))) - q3*(1.0*G*q0*q1*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q0*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)*(0.5*q0*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2) - q3*(q0*q3 - q1*q2))/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) + 1.0*G*q1*q3*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q3*(2*q0*q1 + 2*q2*q3)*(0.5*q0*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2) - q3*(q0*q3 - q1*q2))*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)))

        F[5, 1] = G*q0 - 0.5*G*q1*(2*q0*q1 + 2*q2*q3)*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q2*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + q0*(1.0*G*q0**2*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 1.0*G*q0*q1*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 2.0*G*q0*q1*(2*q0*q1 + 2*q2*q3)*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)**2) - 1.0*G*q0*q3*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q0*(2*q0*q1 + 2*q2*q3)*(-0.5*q1*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2) + q2*(q0*q3 - q1*q2))*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) - 2.0*G*q1*q3*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)**2) + 1.0*G*q2*q3*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) - 0.5*G*q3*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)*(-0.5*q1*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2) + q2*(q0*q3 - q1*q2))/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) + G) + q1*(-1.0*G*q0*q1*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 1.0*G*q0*q2*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) - 1.0*G*q1**2*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) - 2.0*G*q1**2*(2*q0*q1 + 2*q2*q3)*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)**2) + 2.0*G*q1*q2*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)**2) - 0.5*G*q1*(2*q0*q1 + 2*q2*q3)*(-0.5*q1*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2) + q2*(q0*q3 - q1*q2))*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) - 1.0*G*q2**2*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q2*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)*(-0.5*q1*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2) + q2*(q0*q3 - q1*q2))/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) - 0.5*G*(2*q0*q1 + 2*q2*q3)*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1))) + q2*(1.0*G*q0*q1*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 1.0*G*q0*q2*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 2.0*G*q1**2*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)**2) + 2.0*G*q1*q2*(2*q0*q1 + 2*q2*q3)*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)**2) + 0.5*G*q1*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)*(-0.5*q1*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2) + q2*(q0*q3 - q1*q2))/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q2*(2*q0*q1 + 2*q2*q3)*(-0.5*q1*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2) + q2*(q0*q3 - q1*q2))*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1))) - q3*(1.0*G*q0**2*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 2.0*G*q0*q1*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)**2) - 1.0*G*q0*q2*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 1.0*G*q0*q3*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q0*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)*(-0.5*q1*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2) + q2*(q0*q3 - q1*q2))/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) + 1.0*G*q1*q3*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 2.0*G*q1*q3*(2*q0*q1 + 2*q2*q3)*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)**2) + 0.5*G*q3*(2*q0*q1 + 2*q2*q3)*(-0.5*q1*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2) + q2*(q0*q3 - q1*q2))*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)))
        F[5, 2] = 0.5*G*q1*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q2*(2*q0*q1 + 2*q2*q3)*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + G*q3 + q0*(-1.0*G*q0*q2*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 2.0*G*q0*q2*(2*q0*q1 + 2*q2*q3)*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)**2) + 1.0*G*q0*q3*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q0*(2*q0*q1 + 2*q2*q3)*(q1*(q0*q3 - q1*q2) + 0.5*q2*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2))*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) + 1.0*G*q1*q3*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) - 2.0*G*q2*q3*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)**2) - 1.0*G*q3**2*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) - 0.5*G*q3*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)*(q1*(q0*q3 - q1*q2) + 0.5*q2*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2))/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1))) + q1*(-2.0*G*q1*q2*(2*q0*q1 + 2*q2*q3)*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)**2) - 1.0*G*q1*q3*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) - 0.5*G*q1*(2*q0*q1 + 2*q2*q3)*(q1*(q0*q3 - q1*q2) + 0.5*q2*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2))*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) + 2.0*G*q2**2*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)**2) + 1.0*G*q2*q3*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q2*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)*(q1*(q0*q3 - q1*q2) + 0.5*q2*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2))/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1))) + q2*(-1.0*G*q1**2*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 2.0*G*q1*q2*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)**2) + 1.0*G*q1*q3*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q1*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)*(q1*(q0*q3 - q1*q2) + 0.5*q2*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2))/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) - 1.0*G*q2**2*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 2.0*G*q2**2*(2*q0*q1 + 2*q2*q3)*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)**2) + 1.0*G*q2*q3*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q2*(2*q0*q1 + 2*q2*q3)*(q1*(q0*q3 - q1*q2) + 0.5*q2*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2))*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*(2*q0*q1 + 2*q2*q3)*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1))) - q3*(-1.0*G*q0*q1*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 2.0*G*q0*q2*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)**2) + 1.0*G*q0*q3*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q0*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)*(q1*(q0*q3 - q1*q2) + 0.5*q2*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2))/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) - 1.0*G*q2*q3*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 2.0*G*q2*q3*(2*q0*q1 + 2*q2*q3)*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)**2) + 1.0*G*q3**2*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q3*(2*q0*q1 + 2*q2*q3)*(q1*(q0*q3 - q1*q2) + 0.5*q2*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2))*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) - G)

        F[5, 3] = -0.5*G*q0*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + G*q2 - 0.5*G*q3*(2*q0*q1 + 2*q2*q3)*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + q0*(1.0*G*q0*q2*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q0*(2*q0*q1 + 2*q2*q3)*(-q0*(q0*q3 - q1*q2) - 0.5*q3*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2))*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) - 1.0*G*q2*q3*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) - 0.5*G*q3*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)*(-q0*(q0*q3 - q1*q2) - 0.5*q3*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2))/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) - 0.5*G*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1))) + q1*(1.0*G*q0*q2*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) - 1.0*G*q1*q2*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) - 1.0*G*q1*q3*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) - 0.5*G*q1*(2*q0*q1 + 2*q2*q3)*(-q0*(q0*q3 - q1*q2) - 0.5*q3*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2))*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) + 1.0*G*q2**2*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q2*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)*(-q0*(q0*q3 - q1*q2) - 0.5*q3*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2))/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1))) + q2*(1.0*G*q0*q1*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 1.0*G*q1*q2*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q1*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)*(-q0*(q0*q3 - q1*q2) - 0.5*q3*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2))/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) + 1.0*G*q2**2*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 1.0*G*q2*q3*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q2*(2*q0*q1 + 2*q2*q3)*(-q0*(q0*q3 - q1*q2) - 0.5*q3*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2))*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) + G) - q3*(1.0*G*q0**2*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 1.0*G*q0*q2*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q0*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)*(-q0*(q0*q3 - q1*q2) - 0.5*q3*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2))/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) + 1.0*G*q2*q3*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 1.0*G*q3**2*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q3*(2*q0*q1 + 2*q2*q3)*(-q0*(q0*q3 - q1*q2) - 0.5*q3*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2))*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*(2*q0*q1 + 2*q2*q3)*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)))
        F[6, 0] = G*q0 - 0.5*G*q1*(2*q0*q1 + 2*q2*q3)*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q2*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + q0*(1.0*G*q0*q1*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) - 1.0*G*q1**2*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 1.0*G*q1*q2*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) - 0.5*G*q1*(2*q0*q1 + 2*q2*q3)*(0.5*q0*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2) - q3*(q0*q3 - q1*q2))*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) + 1.0*G*q2*q3*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q2*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)*(0.5*q0*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2) - q3*(q0*q3 - q1*q2))/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) + G) - q1*(-1.0*G*q0**2*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 1.0*G*q0*q1*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q0*(2*q0*q1 + 2*q2*q3)*(0.5*q0*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2) - q3*(q0*q3 - q1*q2))*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) - 1.0*G*q1*q3*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) - 1.0*G*q3**2*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) - 0.5*G*q3*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)*(0.5*q0*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2) - q3*(q0*q3 - q1*q2))/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*(2*q0*q1 + 2*q2*q3)*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1))) + q2*(1.0*G*q0*q1*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q0*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)*(0.5*q0*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2) - q3*(q0*q3 - q1*q2))/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) + 1.0*G*q1*q3*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q3*(2*q0*q1 + 2*q2*q3)*(0.5*q0*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2) - q3*(q0*q3 - q1*q2))*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1))) + q3*(-1.0*G*q0*q2*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 1.0*G*q1**2*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 1.0*G*q1*q2*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 1.0*G*q1*q3*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q1*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)*(0.5*q0*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2) - q3*(q0*q3 - q1*q2))/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q2*(2*q0*q1 + 2*q2*q3)*(0.5*q0*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2) - q3*(q0*q3 - q1*q2))*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)))

        F[6, 1] = -0.5*G*q0*(2*q0*q1 + 2*q2*q3)*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) - G*q1 + 0.5*G*q3*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + q0*(-1.0*G*q0*q1*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 1.0*G*q0*q2*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) - 1.0*G*q1**2*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) - 2.0*G*q1**2*(2*q0*q1 + 2*q2*q3)*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)**2) + 2.0*G*q1*q2*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)**2) - 0.5*G*q1*(2*q0*q1 + 2*q2*q3)*(-0.5*q1*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2) + q2*(q0*q3 - q1*q2))*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) - 1.0*G*q2**2*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q2*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)*(-0.5*q1*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2) + q2*(q0*q3 - q1*q2))/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) - 0.5*G*(2*q0*q1 + 2*q2*q3)*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1))) - q1*(1.0*G*q0**2*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 1.0*G*q0*q1*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 2.0*G*q0*q1*(2*q0*q1 + 2*q2*q3)*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)**2) - 1.0*G*q0*q3*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q0*(2*q0*q1 + 2*q2*q3)*(-0.5*q1*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2) + q2*(q0*q3 - q1*q2))*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) - 2.0*G*q1*q3*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)**2) + 1.0*G*q2*q3*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) - 0.5*G*q3*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)*(-0.5*q1*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2) + q2*(q0*q3 - q1*q2))/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) + G) + q2*(1.0*G*q0**2*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 2.0*G*q0*q1*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)**2) - 1.0*G*q0*q2*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 1.0*G*q0*q3*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q0*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)*(-0.5*q1*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2) + q2*(q0*q3 - q1*q2))/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) + 1.0*G*q1*q3*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 2.0*G*q1*q3*(2*q0*q1 + 2*q2*q3)*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)**2) + 0.5*G*q3*(2*q0*q1 + 2*q2*q3)*(-0.5*q1*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2) + q2*(q0*q3 - q1*q2))*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1))) + q3*(1.0*G*q0*q1*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 1.0*G*q0*q2*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 2.0*G*q1**2*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)**2) + 2.0*G*q1*q2*(2*q0*q1 + 2*q2*q3)*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)**2) + 0.5*G*q1*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)*(-0.5*q1*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2) + q2*(q0*q3 - q1*q2))/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q2*(2*q0*q1 + 2*q2*q3)*(-0.5*q1*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2) + q2*(q0*q3 - q1*q2))*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)))
        F[6, 2] = 0.5*G*q0*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) - G*q2 + 0.5*G*q3*(2*q0*q1 + 2*q2*q3)*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + q0*(-2.0*G*q1*q2*(2*q0*q1 + 2*q2*q3)*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)**2) - 1.0*G*q1*q3*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) - 0.5*G*q1*(2*q0*q1 + 2*q2*q3)*(q1*(q0*q3 - q1*q2) + 0.5*q2*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2))*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) + 2.0*G*q2**2*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)**2) + 1.0*G*q2*q3*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q2*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)*(q1*(q0*q3 - q1*q2) + 0.5*q2*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2))/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1))) - q1*(-1.0*G*q0*q2*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 2.0*G*q0*q2*(2*q0*q1 + 2*q2*q3)*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)**2) + 1.0*G*q0*q3*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q0*(2*q0*q1 + 2*q2*q3)*(q1*(q0*q3 - q1*q2) + 0.5*q2*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2))*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) + 1.0*G*q1*q3*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) - 2.0*G*q2*q3*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)**2) - 1.0*G*q3**2*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) - 0.5*G*q3*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)*(q1*(q0*q3 - q1*q2) + 0.5*q2*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2))/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1))) + q2*(-1.0*G*q0*q1*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 2.0*G*q0*q2*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)**2) + 1.0*G*q0*q3*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q0*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)*(q1*(q0*q3 - q1*q2) + 0.5*q2*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2))/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) - 1.0*G*q2*q3*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 2.0*G*q2*q3*(2*q0*q1 + 2*q2*q3)*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)**2) + 1.0*G*q3**2*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q3*(2*q0*q1 + 2*q2*q3)*(q1*(q0*q3 - q1*q2) + 0.5*q2*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2))*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) - G) + q3*(-1.0*G*q1**2*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 2.0*G*q1*q2*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)**2) + 1.0*G*q1*q3*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q1*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)*(q1*(q0*q3 - q1*q2) + 0.5*q2*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2))/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) - 1.0*G*q2**2*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 2.0*G*q2**2*(2*q0*q1 + 2*q2*q3)*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)**2) + 1.0*G*q2*q3*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q2*(2*q0*q1 + 2*q2*q3)*(q1*(q0*q3 - q1*q2) + 0.5*q2*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2))*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*(2*q0*q1 + 2*q2*q3)*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)))

        F[6, 3] = 0.5*G*q1*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q2*(2*q0*q1 + 2*q2*q3)*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + G*q3 + q0*(1.0*G*q0*q2*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) - 1.0*G*q1*q2*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) - 1.0*G*q1*q3*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) - 0.5*G*q1*(2*q0*q1 + 2*q2*q3)*(-q0*(q0*q3 - q1*q2) - 0.5*q3*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2))*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) + 1.0*G*q2**2*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q2*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)*(-q0*(q0*q3 - q1*q2) - 0.5*q3*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2))/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1))) - q1*(1.0*G*q0*q2*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q0*(2*q0*q1 + 2*q2*q3)*(-q0*(q0*q3 - q1*q2) - 0.5*q3*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2))*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) - 1.0*G*q2*q3*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) - 0.5*G*q3*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)*(-q0*(q0*q3 - q1*q2) - 0.5*q3*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2))/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) - 0.5*G*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1))) + q2*(1.0*G*q0**2*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 1.0*G*q0*q2*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q0*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)*(-q0*(q0*q3 - q1*q2) - 0.5*q3*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2))/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) + 1.0*G*q2*q3*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 1.0*G*q3**2*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q3*(2*q0*q1 + 2*q2*q3)*(-q0*(q0*q3 - q1*q2) - 0.5*q3*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2))*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*(2*q0*q1 + 2*q2*q3)*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1))) + q3*(1.0*G*q0*q1*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 1.0*G*q1*q2*(2.0*q0*q3 - 2.0*q1*q2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q1*(2*q0*q1 + 2*q2*q3)*(2.0*q0*q3 - 2.0*q1*q2)*(-q0*(q0*q3 - q1*q2) - 0.5*q3*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2))/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) + 1.0*G*q2**2*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 1.0*G*q2*q3*(2*q0*q1 + 2*q2*q3)/(sqrt((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)*(-2*q1**2 - 2*q2**2 + 1)) + 0.5*G*q2*(2*q0*q1 + 2*q2*q3)*(-q0*(q0*q3 - q1*q2) - 0.5*q3*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2))*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)/(((q0*q3 - q1*q2)**2 + 0.25*(-1.0*q0**2 + 1.0*q1**2 - 1.0*q2**2 + 1.0*q3**2)**2)**(3/2)*(-2*q1**2 - 2*q2**2 + 1)) + G)
        F[7, 0] = 4*G*q0*q1*q2/(tas*(-2*q1**2 - 2*q2**2 + 1)) - 4*G*q1**2*q3/(tas*(-2*q1**2 - 2*q2**2 + 1)) + 2*G*q2*(2*q0*q1 + 2*q2*q3)/(tas*(-2*q1**2 - 2*q2**2 + 1))
        F[7, 1] = 4*G*q0**2*q2/(tas*(-2*q1**2 - 2*q2**2 + 1)) + 8*G*q0*q1*q2*(2*q0*q1 + 2*q2*q3)/(tas*(-2*q1**2 - 2*q2**2 + 1)**2) - 4*G*q0*q1*q3/(tas*(-2*q1**2 - 2*q2**2 + 1)) - 8*G*q1**2*q3*(2*q0*q1 + 2*q2*q3)/(tas*(-2*q1**2 - 2*q2**2 + 1)**2) - 2*G*q3*(2*q0*q1 + 2*q2*q3)/(tas*(-2*q1**2 - 2*q2**2 + 1))
        F[7, 2] = 8*G*q0*q2**2*(2*q0*q1 + 2*q2*q3)/(tas*(-2*q1**2 - 2*q2**2 + 1)**2) + 4*G*q0*q2*q3/(tas*(-2*q1**2 - 2*q2**2 + 1)) + 2*G*q0*(2*q0*q1 + 2*q2*q3)/(tas*(-2*q1**2 - 2*q2**2 + 1)) - 8*G*q1*q2*q3*(2*q0*q1 + 2*q2*q3)/(tas*(-2*q1**2 - 2*q2**2 + 1)**2) - 4*G*q1*q3**2/(tas*(-2*q1**2 - 2*q2**2 + 1))
        F[7, 3] = 4*G*q0*q2**2/(tas*(-2*q1**2 - 2*q2**2 + 1)) - 4*G*q1*q2*q3/(tas*(-2*q1**2 - 2*q2**2 + 1)) - 2*G*q1*(2*q0*q1 + 2*q2*q3)/(tas*(-2*q1**2 - 2*q2**2 + 1))
        F[7, 10] = -2*G*q0*q2*(2*q0*q1 + 2*q2*q3)/(tas**2*(-2*q1**2 - 2*q2**2 + 1)) + 2*G*q1*q3*(2*q0*q1 + 2*q2*q3)/(tas**2*(-2*q1**2 - 2*q2**2 + 1))
        F[8, 0] = -4*G*q0*q1**2/(tas*(-2*q1**2 - 2*q2**2 + 1)) - 4*G*q1*q2*q3/(tas*(-2*q1**2 - 2*q2**2 + 1)) - 2*G*q1*(2*q0*q1 + 2*q2*q3)/(tas*(-2*q1**2 - 2*q2**2 + 1))
        F[8, 1] = -4*G*q0**2*q1/(tas*(-2*q1**2 - 2*q2**2 + 1)) - 8*G*q0*q1**2*(2*q0*q1 + 2*q2*q3)/(tas*(-2*q1**2 - 2*q2**2 + 1)**2) - 4*G*q0*q2*q3/(tas*(-2*q1**2 - 2*q2**2 + 1)) - 2*G*q0*(2*q0*q1 + 2*q2*q3)/(tas*(-2*q1**2 - 2*q2**2 + 1)) - 8*G*q1*q2*q3*(2*q0*q1 + 2*q2*q3)/(tas*(-2*q1**2 - 2*q2**2 + 1)**2)
        F[8, 2] = -8*G*q0*q1*q2*(2*q0*q1 + 2*q2*q3)/(tas*(-2*q1**2 - 2*q2**2 + 1)**2) - 4*G*q0*q1*q3/(tas*(-2*q1**2 - 2*q2**2 + 1)) - 8*G*q2**2*q3*(2*q0*q1 + 2*q2*q3)/(tas*(-2*q1**2 - 2*q2**2 + 1)**2) - 4*G*q2*q3**2/(tas*(-2*q1**2 - 2*q2**2 + 1)) - 2*G*q3*(2*q0*q1 + 2*q2*q3)/(tas*(-2*q1**2 - 2*q2**2 + 1))
        F[8, 3] = -4*G*q0*q1*q2/(tas*(-2*q1**2 - 2*q2**2 + 1)) - 4*G*q2**2*q3/(tas*(-2*q1**2 - 2*q2**2 + 1)) - 2*G*q2*(2*q0*q1 + 2*q2*q3)/(tas*(-2*q1**2 - 2*q2**2 + 1))
        F[8, 10] = 2*G*q0*q1*(2*q0*q1 + 2*q2*q3)/(tas**2*(-2*q1**2 - 2*q2**2 + 1)) + 2*G*q2*q3*(2*q0*q1 + 2*q2*q3)/(tas**2*(-2*q1**2 - 2*q2**2 + 1))
        F[9, 0] = -2*G*q0**2*q1/(tas*(-2*q1**2 - 2*q2**2 + 1)) - 2*G*q0*(2*q0*q1 + 2*q2*q3)/(tas*(-2*q1**2 - 2*q2**2 + 1)) + 2*G*q1**3/(tas*(-2*q1**2 - 2*q2**2 + 1)) + 2*G*q1*q2**2/(tas*(-2*q1**2 - 2*q2**2 + 1)) - 2*G*q1*q3**2/(tas*(-2*q1**2 - 2*q2**2 + 1))
        F[9, 1] = -2*G*q0**3/(tas*(-2*q1**2 - 2*q2**2 + 1)) - 4*G*q0**2*q1*(2*q0*q1 + 2*q2*q3)/(tas*(-2*q1**2 - 2*q2**2 + 1)**2) + 2*G*q0*q1**2/(tas*(-2*q1**2 - 2*q2**2 + 1)) + 2*G*q0*q2**2/(tas*(-2*q1**2 - 2*q2**2 + 1)) - 2*G*q0*q3**2/(tas*(-2*q1**2 - 2*q2**2 + 1)) + 4*G*q1**3*(2*q0*q1 + 2*q2*q3)/(tas*(-2*q1**2 - 2*q2**2 + 1)**2) + 4*G*q1*q2**2*(2*q0*q1 + 2*q2*q3)/(tas*(-2*q1**2 - 2*q2**2 + 1)**2) - 4*G*q1*q3**2*(2*q0*q1 + 2*q2*q3)/(tas*(-2*q1**2 - 2*q2**2 + 1)**2) + 2*G*q1*(2*q0*q1 + 2*q2*q3)/(tas*(-2*q1**2 - 2*q2**2 + 1))
        F[9, 2] = -4*G*q0**2*q2*(2*q0*q1 + 2*q2*q3)/(tas*(-2*q1**2 - 2*q2**2 + 1)**2) - 2*G*q0**2*q3/(tas*(-2*q1**2 - 2*q2**2 + 1)) + 4*G*q1**2*q2*(2*q0*q1 + 2*q2*q3)/(tas*(-2*q1**2 - 2*q2**2 + 1)**2) + 2*G*q1**2*q3/(tas*(-2*q1**2 - 2*q2**2 + 1)) + 4*G*q2**3*(2*q0*q1 + 2*q2*q3)/(tas*(-2*q1**2 - 2*q2**2 + 1)**2) + 2*G*q2**2*q3/(tas*(-2*q1**2 - 2*q2**2 + 1)) - 4*G*q2*q3**2*(2*q0*q1 + 2*q2*q3)/(tas*(-2*q1**2 - 2*q2**2 + 1)**2) + 2*G*q2*(2*q0*q1 + 2*q2*q3)/(tas*(-2*q1**2 - 2*q2**2 + 1)) - 2*G*q3**3/(tas*(-2*q1**2 - 2*q2**2 + 1))
        F[9, 3] = -2*G*q0**2*q2/(tas*(-2*q1**2 - 2*q2**2 + 1)) + 2*G*q1**2*q2/(tas*(-2*q1**2 - 2*q2**2 + 1)) + 2*G*q2**3/(tas*(-2*q1**2 - 2*q2**2 + 1)) - 2*G*q2*q3**2/(tas*(-2*q1**2 - 2*q2**2 + 1)) - 2*G*q3*(2*q0*q1 + 2*q2*q3)/(tas*(-2*q1**2 - 2*q2**2 + 1))
        F[9, 10] = G*q0**2*(2*q0*q1 + 2*q2*q3)/(tas**2*(-2*q1**2 - 2*q2**2 + 1)) - G*q1**2*(2*q0*q1 + 2*q2*q3)/(tas**2*(-2*q1**2 - 2*q2**2 + 1)) - G*q2**2*(2*q0*q1 + 2*q2*q3)/(tas**2*(-2*q1**2 - 2*q2**2 + 1)) + G*q3**2*(2*q0*q1 + 2*q2*q3)/(tas**2*(-2*q1**2 - 2*q2**2 + 1))
        F[10, 10] = 1
        return F
